package com.jriver.test;

import org.springframework.beans.BeansException;
import org.springframework.beans.FatalBeanException;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.context.support.ApplicationObjectSupport;
import org.springframework.core.BridgeMethodResolver;
import org.springframework.core.Ordered;
import org.springframework.stereotype.Component;
import org.springframework.util.ClassUtils;
import org.springframework.util.ReflectionUtils;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

/**
 * Created by WUJIANJIANG913 on 2016-11-01.
 */
@Component
public class JServiceProcessor extends ApplicationObjectSupport implements BeanPostProcessor,Ordered {
    @Override
    public Object postProcessBeforeInitialization(Object o, String s) throws BeansException {
        return o;
    }

    @Override
    public Object postProcessAfterInitialization(Object beanObject, String beanName) throws BeansException {
        Class<?> clazz = beanObject.getClass();
        Class<?> targetClass = clazz;
        do{
            for (Field field : targetClass.getDeclaredFields()) {
                JService annotation=null;
                if ((annotation=field.getAnnotation(JService.class))!=null) {
                    if (Modifier.isStatic(field.getModifiers())) {
                        throw new IllegalStateException("@JService annotation is not supported on static fields");
                    }
                    if(field.getType()!=JServiceClient.class){
                        throw new IllegalStateException("@JService annotation requires on field type:"+JServiceClient.class.getName());
                    }
                    ReflectionUtils.makeAccessible(field);
                    try {
                        if(logger.isInfoEnabled()){
                            logger.info("Handle annotation<" + annotation + "> for Bean<" + beanName + "> field<" + field.getName() + ">.");
                        }
                        field.set(beanObject, new JServiceClient());
                    } catch (Exception e) {
                        throw new FatalBeanException("wire annotation:"+annotation+" error,cause:"+e.getMessage(),e);
                    }
                }
            }
            for (Method method : targetClass.getDeclaredMethods()) {
                JService annotation=method.getAnnotation(JService.class);
                if(annotation!=null){
                    method = BridgeMethodResolver.findBridgedMethod(method);
                    Method mostSpecificMethod = BridgeMethodResolver.findBridgedMethod(ClassUtils.getMostSpecificMethod(method, clazz));
                    if (method.equals(mostSpecificMethod) && method.isAnnotationPresent(JService.class)) {

                        try {
                            if (Modifier.isStatic(method.getModifiers())) {
                                throw new IllegalStateException("@JService annotation is not supported on static methods");
                            }
                            if (method.getParameterTypes().length != 1) {
                                throw new IllegalStateException("@JService annotation requires a single-arg method: " + method);
                            }
                            if(method.getParameterTypes()[0]!=JServiceClient.class){
                                throw new IllegalStateException("@JService annotation requires method-arg be:"+JServiceClient.class.getName());
                            }
                            ReflectionUtils.makeAccessible(method);
                            if(logger.isInfoEnabled()){
                                logger.info("Handle annotation<" + annotation + "> for Bean<" + beanName + "> method<" + method.getName() + ">.");
                            }
                            method.invoke(beanObject, new JServiceClient());
                        } catch (Throwable e) {
                            if( e instanceof InvocationTargetException){
                                e=((InvocationTargetException)e).getTargetException();
                            }
                            throw new FatalBeanException("wire annotation:"+annotation+" error,cause:"+e.getMessage(),e);
                        }
                    }
                }
            }
            targetClass=targetClass.getSuperclass();
        }while((targetClass != null) && (targetClass != Object.class));
        return beanObject;
    }

    @Override
    public int getOrder() {
        return 0;
    }
}
